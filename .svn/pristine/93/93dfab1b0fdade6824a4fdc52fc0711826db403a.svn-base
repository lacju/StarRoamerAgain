using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Rewired;

public class SellItemFromInventory : MonoBehaviour {

    private Inventory _playerInv;
    private PlayerObjectController _POC;
    private VendorHandler _vendor;

    public int rewiredPlayerId = 0;
    private Player rewiredPlayer;

    private void Awake()
    {
        
        _POC = FindObjectOfType<PlayerObjectController>();
        _vendor = FindObjectOfType<VendorHandler>();
        _playerInv = FindObjectOfType<Inventory>();
    }


    public void SellItem(int itemslot)
    {
        _vendor = FindObjectOfType<VendorHandler>();
        Debug.Log(_playerInv.items[itemslot]);
        Debug.Log(_POC);
        Debug.Log(_playerInv);

        if (_vendor != null)
        {
            if (_vendor.isActiveAndEnabled)
            {
                if (_playerInv.items[itemslot].GetQuantity() != 0)
                {
                    if (rewiredPlayer.GetButton("ShiftModifier")) //Hold shift and click to sell the whole inventory slots worth of items
                    {
                   
                        _POC.AddToCurrentCredits(_playerInv.items[itemslot].quantity * (_playerInv.items[itemslot].baseCostCredits * (_vendor.GetPriceModifier() + 1)));
                        _playerInv.RemoveStackableItem(_playerInv.items[itemslot], _playerInv.items[itemslot].quantity);
                    }
                    else
                    {
                  
                        _POC.AddToCurrentCredits(_playerInv.items[itemslot].quantity * (_playerInv.items[itemslot].baseCostCredits * (_vendor.GetPriceModifier() + 1)));
                        _playerInv.RemoveStackableItem(_playerInv.items[itemslot], 1);
                    }
                }


                _POC.AddToCurrentCredits(_playerInv.items[itemslot].baseCostCredits);
                Debug.Log(_playerInv.items[itemslot]);
                _playerInv.RemoveItem(_playerInv.items[itemslot]);
                Debug.Log(_playerInv.items[itemslot]);

            }
        }
    }

}
