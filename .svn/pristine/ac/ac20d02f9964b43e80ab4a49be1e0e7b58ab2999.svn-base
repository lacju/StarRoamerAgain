using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Shield : Item {

    public enum DamageType
    {
        Radiation, Heat, Kinetic, EM
    }

    public float maxCapacity;
    public float rechargeRate;
    public float rechargeDelay;
    public float dmgResistance;
    public float dmgWeakness;
    public DamageType damageResistance;
    public DamageType damageWeakness;

    private PlayerObjectController _POC;
    private bool regenOnCoolDown = false;

    public void InitializeEquipment(float maxcapacity, float rechargerate, float rechargedelay, DamageType damageresistance, float dmgresist, DamageType damageweakness, float dmgweakness, Sprite iconImg, string itemtype, string itemname, int ID, bool isequipment, string itemdescription, float basecostcredits)
    {
        maxCapacity = maxcapacity;
        rechargeRate = rechargerate;
        rechargeDelay = rechargedelay;
        sprite = iconImg;
        itemType = itemtype;
        itemName = itemname;
        itemID = ID;
        isEquipment = isequipment;
        itemDescription = itemdescription;
        baseCostCredits = basecostcredits;
        dmgResistance = dmgresist;
        dmgWeakness = dmgweakness;
    }

    public void Update()
    {
        if (isEquipped && !regenOnCoolDown)
        {
            Regenerate();
        }
    }

    public void EquipEquipment()
    {
        _POC = GameObject.FindGameObjectWithTag("Player").GetComponent<PlayerObjectController>();
        _POC.SetMaxShields(MaxCapacity());
        _POC.SetCurrentShieldPoints(0);
        isEquipped = true;
    }

    public void UnequipEquipment()
    {
        _POC.SetCurrentShieldPoints(0);
        _POC.SetMaxShields(1);
        isEquipped = false;

    }

    IEnumerator Regenerate() 
    {
        if (_POC.GetCurrentShieldPoints() < _POC.GetMaxShields())
        {
            if (_POC.GetCurrentShieldPoints() <= 0)
            {
                _POC.DisableShieldEffect();
                _POC.SetCurrentShieldPoints(.1f);

                yield return new WaitForSeconds(rechargeDelay);
               // Invoke("DelayedRegenerate", rechargeDelay);
            }
            else
            {
                if ((maxCapacity - _POC.GetCurrentShieldPoints()) < RechargeRate())
                {
                    _POC.SetCurrentShieldPoints(_POC.GetMaxShields());
                }
                else
                {
   //                 regenOnCoolDown = true;
                    //Invoke("AddShield", 2);
                    _POC.AddToCurrentShields(RechargeRate());
                    _POC.EnableShieldEffect();
                    yield return new WaitForSeconds(2);
                }
            }
        }
    }

    //void DelayedRegenerate() //called by regenerate method when the recharge delay needs be enacted (shields drop to zero or less)
    //{
    //    _POC.AddToCurrentShields(RechargeRate());
    //    _POC.EnableShieldEffect();
    //    CancelInvoke();
    //}
    //private void AddShield()
    //{
    //    _POC.AddToCurrentShields(RechargeRate());
    //    regenOnCoolDown = false;
    //}
    public float MaxCapacity()
    {
        return maxCapacity;
    }

    public float RechargeRate()
    {
        return rechargeRate;
    }

    private float RechargeDelay()
    {
        return rechargeRate;
    }

    public class Debug
    {
        public static void Log(object obj)
        {
            UnityEngine.Debug.Log(System.DateTime.Now.ToLongTimeString() + " : " + obj);

        }
    } // time stamps debug
}